// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/quocbang/data-flow-sync/server/internal/repositories"
	mock "github.com/stretchr/testify/mock"
)

// MergeRequestServices is an autogenerated mock type for the MergeRequestServices type
type MergeRequestServices struct {
	mock.Mock
}

type MergeRequestServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MergeRequestServices) EXPECT() *MergeRequestServices_Expecter {
	return &MergeRequestServices_Expecter{mock: &_m.Mock}
}

// CreateMergeRequest provides a mock function with given fields: _a0, _a1
func (_m *MergeRequestServices) CreateMergeRequest(_a0 context.Context, _a1 repositories.CreateMRRequest) (repositories.CreateMRReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.CreateMRReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateMRRequest) (repositories.CreateMRReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateMRRequest) repositories.CreateMRReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.CreateMRReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateMRRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeRequestServices_CreateMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequest'
type MergeRequestServices_CreateMergeRequest_Call struct {
	*mock.Call
}

// CreateMergeRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.CreateMRRequest
func (_e *MergeRequestServices_Expecter) CreateMergeRequest(_a0 interface{}, _a1 interface{}) *MergeRequestServices_CreateMergeRequest_Call {
	return &MergeRequestServices_CreateMergeRequest_Call{Call: _e.mock.On("CreateMergeRequest", _a0, _a1)}
}

func (_c *MergeRequestServices_CreateMergeRequest_Call) Run(run func(_a0 context.Context, _a1 repositories.CreateMRRequest)) *MergeRequestServices_CreateMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateMRRequest))
	})
	return _c
}

func (_c *MergeRequestServices_CreateMergeRequest_Call) Return(_a0 repositories.CreateMRReply, _a1 error) *MergeRequestServices_CreateMergeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MergeRequestServices_CreateMergeRequest_Call) RunAndReturn(run func(context.Context, repositories.CreateMRRequest) (repositories.CreateMRReply, error)) *MergeRequestServices_CreateMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequest provides a mock function with given fields: _a0, _a1
func (_m *MergeRequestServices) GetMergeRequest(_a0 context.Context, _a1 repositories.GetMRRequest) (repositories.GetMRReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.GetMRReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetMRRequest) (repositories.GetMRReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetMRRequest) repositories.GetMRReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.GetMRReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetMRRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeRequestServices_GetMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequest'
type MergeRequestServices_GetMergeRequest_Call struct {
	*mock.Call
}

// GetMergeRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.GetMRRequest
func (_e *MergeRequestServices_Expecter) GetMergeRequest(_a0 interface{}, _a1 interface{}) *MergeRequestServices_GetMergeRequest_Call {
	return &MergeRequestServices_GetMergeRequest_Call{Call: _e.mock.On("GetMergeRequest", _a0, _a1)}
}

func (_c *MergeRequestServices_GetMergeRequest_Call) Run(run func(_a0 context.Context, _a1 repositories.GetMRRequest)) *MergeRequestServices_GetMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.GetMRRequest))
	})
	return _c
}

func (_c *MergeRequestServices_GetMergeRequest_Call) Return(_a0 repositories.GetMRReply, _a1 error) *MergeRequestServices_GetMergeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MergeRequestServices_GetMergeRequest_Call) RunAndReturn(run func(context.Context, repositories.GetMRRequest) (repositories.GetMRReply, error)) *MergeRequestServices_GetMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestOpeningByFileID provides a mock function with given fields: _a0, _a1
func (_m *MergeRequestServices) GetMergeRequestOpeningByFileID(_a0 context.Context, _a1 string) (repositories.GetMergeRequestOpeningByFileIDReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.GetMergeRequestOpeningByFileIDReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.GetMergeRequestOpeningByFileIDReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.GetMergeRequestOpeningByFileIDReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.GetMergeRequestOpeningByFileIDReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeRequestServices_GetMergeRequestOpeningByFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestOpeningByFileID'
type MergeRequestServices_GetMergeRequestOpeningByFileID_Call struct {
	*mock.Call
}

// GetMergeRequestOpeningByFileID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MergeRequestServices_Expecter) GetMergeRequestOpeningByFileID(_a0 interface{}, _a1 interface{}) *MergeRequestServices_GetMergeRequestOpeningByFileID_Call {
	return &MergeRequestServices_GetMergeRequestOpeningByFileID_Call{Call: _e.mock.On("GetMergeRequestOpeningByFileID", _a0, _a1)}
}

func (_c *MergeRequestServices_GetMergeRequestOpeningByFileID_Call) Run(run func(_a0 context.Context, _a1 string)) *MergeRequestServices_GetMergeRequestOpeningByFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MergeRequestServices_GetMergeRequestOpeningByFileID_Call) Return(_a0 repositories.GetMergeRequestOpeningByFileIDReply, _a1 error) *MergeRequestServices_GetMergeRequestOpeningByFileID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MergeRequestServices_GetMergeRequestOpeningByFileID_Call) RunAndReturn(run func(context.Context, string) (repositories.GetMergeRequestOpeningByFileIDReply, error)) *MergeRequestServices_GetMergeRequestOpeningByFileID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMergeRequestServices creates a new instance of MergeRequestServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMergeRequestServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MergeRequestServices {
	mock := &MergeRequestServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
