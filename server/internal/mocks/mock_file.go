// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/quocbang/data-flow-sync/server/internal/repositories"
	mock "github.com/stretchr/testify/mock"
)

// FileServices is an autogenerated mock type for the FileServices type
type FileServices struct {
	mock.Mock
}

type FileServices_Expecter struct {
	mock *mock.Mock
}

func (_m *FileServices) EXPECT() *FileServices_Expecter {
	return &FileServices_Expecter{mock: &_m.Mock}
}

// GetFile provides a mock function with given fields: _a0, _a1
func (_m *FileServices) GetFile(_a0 context.Context, _a1 repositories.GetFileRequest) (repositories.GetFileReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.GetFileReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetFileRequest) (repositories.GetFileReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetFileRequest) repositories.GetFileReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.GetFileReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileServices_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type FileServices_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.GetFileRequest
func (_e *FileServices_Expecter) GetFile(_a0 interface{}, _a1 interface{}) *FileServices_GetFile_Call {
	return &FileServices_GetFile_Call{Call: _e.mock.On("GetFile", _a0, _a1)}
}

func (_c *FileServices_GetFile_Call) Run(run func(_a0 context.Context, _a1 repositories.GetFileRequest)) *FileServices_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.GetFileRequest))
	})
	return _c
}

func (_c *FileServices_GetFile_Call) Return(_a0 repositories.GetFileReply, _a1 error) *FileServices_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileServices_GetFile_Call) RunAndReturn(run func(context.Context, repositories.GetFileRequest) (repositories.GetFileReply, error)) *FileServices_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileServices creates a new instance of FileServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileServices {
	mock := &FileServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
