// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mailserver "github.com/quocbang/data-flow-sync/server/internal/mailserver"
	mock "github.com/stretchr/testify/mock"
)

// MailServer is an autogenerated mock type for the MailServer type
type MailServer struct {
	mock.Mock
}

type MailServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MailServer) EXPECT() *MailServer_Expecter {
	return &MailServer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MailServer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MailServer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MailServer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MailServer_Expecter) Close() *MailServer_Close_Call {
	return &MailServer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MailServer_Close_Call) Run(run func()) *MailServer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MailServer_Close_Call) Return(_a0 error) *MailServer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailServer_Close_Call) RunAndReturn(run func() error) *MailServer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// SendAccountVerification provides a mock function with given fields: _a0, _a1
func (_m *MailServer) SendAccountVerification(_a0 context.Context, _a1 mailserver.MailVerifyRequest) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mailserver.MailVerifyRequest) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mailserver.MailVerifyRequest) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mailserver.MailVerifyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MailServer_SendAccountVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAccountVerification'
type MailServer_SendAccountVerification_Call struct {
	*mock.Call
}

// SendAccountVerification is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 mailserver.MailVerifyRequest
func (_e *MailServer_Expecter) SendAccountVerification(_a0 interface{}, _a1 interface{}) *MailServer_SendAccountVerification_Call {
	return &MailServer_SendAccountVerification_Call{Call: _e.mock.On("SendAccountVerification", _a0, _a1)}
}

func (_c *MailServer_SendAccountVerification_Call) Run(run func(_a0 context.Context, _a1 mailserver.MailVerifyRequest)) *MailServer_SendAccountVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mailserver.MailVerifyRequest))
	})
	return _c
}

func (_c *MailServer_SendAccountVerification_Call) Return(_a0 string, _a1 error) *MailServer_SendAccountVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MailServer_SendAccountVerification_Call) RunAndReturn(run func(context.Context, mailserver.MailVerifyRequest) (string, error)) *MailServer_SendAccountVerification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailServer creates a new instance of MailServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailServer {
	mock := &MailServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
