// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RedisConn is an autogenerated mock type for the RedisConn type
type RedisConn struct {
	mock.Mock
}

type RedisConn_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisConn) EXPECT() *RedisConn_Expecter {
	return &RedisConn_Expecter{mock: &_m.Mock}
}

// AddOTP provides a mock function with given fields: _a0, _a1, _a2
func (_m *RedisConn) AddOTP(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisConn_AddOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOTP'
type RedisConn_AddOTP_Call struct {
	*mock.Call
}

// AddOTP is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *RedisConn_Expecter) AddOTP(_a0 interface{}, _a1 interface{}, _a2 interface{}) *RedisConn_AddOTP_Call {
	return &RedisConn_AddOTP_Call{Call: _e.mock.On("AddOTP", _a0, _a1, _a2)}
}

func (_c *RedisConn_AddOTP_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *RedisConn_AddOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RedisConn_AddOTP_Call) Return(_a0 error) *RedisConn_AddOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConn_AddOTP_Call) RunAndReturn(run func(context.Context, string, string) error) *RedisConn_AddOTP_Call {
	_c.Call.Return(run)
	return _c
}

// AddToBackList provides a mock function with given fields: _a0, _a1, _a2
func (_m *RedisConn) AddToBackList(_a0 context.Context, _a1 string, _a2 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisConn_AddToBackList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToBackList'
type RedisConn_AddToBackList_Call struct {
	*mock.Call
}

// AddToBackList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 time.Duration
func (_e *RedisConn_Expecter) AddToBackList(_a0 interface{}, _a1 interface{}, _a2 interface{}) *RedisConn_AddToBackList_Call {
	return &RedisConn_AddToBackList_Call{Call: _e.mock.On("AddToBackList", _a0, _a1, _a2)}
}

func (_c *RedisConn_AddToBackList_Call) Run(run func(_a0 context.Context, _a1 string, _a2 time.Duration)) *RedisConn_AddToBackList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *RedisConn_AddToBackList_Call) Return(_a0 error) *RedisConn_AddToBackList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConn_AddToBackList_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *RedisConn_AddToBackList_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *RedisConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RedisConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *RedisConn_Expecter) Close() *RedisConn_Close_Call {
	return &RedisConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *RedisConn_Close_Call) Run(run func()) *RedisConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConn_Close_Call) Return(_a0 error) *RedisConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConn_Close_Call) RunAndReturn(run func() error) *RedisConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DelOTP provides a mock function with given fields: _a0, _a1
func (_m *RedisConn) DelOTP(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisConn_DelOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelOTP'
type RedisConn_DelOTP_Call struct {
	*mock.Call
}

// DelOTP is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *RedisConn_Expecter) DelOTP(_a0 interface{}, _a1 interface{}) *RedisConn_DelOTP_Call {
	return &RedisConn_DelOTP_Call{Call: _e.mock.On("DelOTP", _a0, _a1)}
}

func (_c *RedisConn_DelOTP_Call) Run(run func(_a0 context.Context, _a1 string)) *RedisConn_DelOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedisConn_DelOTP_Call) Return(_a0 error) *RedisConn_DelOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConn_DelOTP_Call) RunAndReturn(run func(context.Context, string) error) *RedisConn_DelOTP_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlackList provides a mock function with given fields: _a0, _a1
func (_m *RedisConn) GetBlackList(_a0 context.Context, _a1 string) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisConn_GetBlackList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlackList'
type RedisConn_GetBlackList_Call struct {
	*mock.Call
}

// GetBlackList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *RedisConn_Expecter) GetBlackList(_a0 interface{}, _a1 interface{}) *RedisConn_GetBlackList_Call {
	return &RedisConn_GetBlackList_Call{Call: _e.mock.On("GetBlackList", _a0, _a1)}
}

func (_c *RedisConn_GetBlackList_Call) Run(run func(_a0 context.Context, _a1 string)) *RedisConn_GetBlackList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedisConn_GetBlackList_Call) Return(_a0 int64, _a1 error) *RedisConn_GetBlackList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisConn_GetBlackList_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *RedisConn_GetBlackList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOTPByEmail provides a mock function with given fields: _a0, _a1
func (_m *RedisConn) GetOTPByEmail(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisConn_GetOTPByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOTPByEmail'
type RedisConn_GetOTPByEmail_Call struct {
	*mock.Call
}

// GetOTPByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *RedisConn_Expecter) GetOTPByEmail(_a0 interface{}, _a1 interface{}) *RedisConn_GetOTPByEmail_Call {
	return &RedisConn_GetOTPByEmail_Call{Call: _e.mock.On("GetOTPByEmail", _a0, _a1)}
}

func (_c *RedisConn_GetOTPByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *RedisConn_GetOTPByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedisConn_GetOTPByEmail_Call) Return(_a0 string, _a1 error) *RedisConn_GetOTPByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisConn_GetOTPByEmail_Call) RunAndReturn(run func(context.Context, string) (string, error)) *RedisConn_GetOTPByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisConn creates a new instance of RedisConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisConn {
	mock := &RedisConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
