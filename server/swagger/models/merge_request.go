// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MergeRequest merge request
//
// swagger:model MergeRequest
type MergeRequest struct {

	// merge request owner
	CreateBy string `json:"CreateBy,omitempty"`

	// latest modified time
	// Example: 2017-07-21T17:32:28Z
	// Format: date-time
	LastModified strfmt.DateTime `json:"LastModified,omitempty"`

	// merge request id
	MergeRequestID string `json:"MergeRequestID,omitempty"`

	// merge request expiry time, auto close merge request if was expired
	RequestExpiryTime int64 `json:"RequestExpiryTime,omitempty"`

	// files
	Files *MergeRequestFiles `json:"files,omitempty"`
}

// Validate validates this merge request
func (m *MergeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MergeRequest) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MergeRequest) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {
		if err := m.Files.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this merge request based on the context it is used
func (m *MergeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MergeRequest) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	if m.Files != nil {
		if err := m.Files.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MergeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MergeRequest) UnmarshalBinary(b []byte) error {
	var res MergeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MergeRequestFiles merge request files
//
// swagger:model MergeRequestFiles
type MergeRequestFiles struct {

	// temporary file path
	TemporaryPath string `json:"TemporaryPath,omitempty"`

	// target file path
	TargetPath string `json:"targetPath,omitempty"`
}

// Validate validates this merge request files
func (m *MergeRequestFiles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this merge request files based on context it is used
func (m *MergeRequestFiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MergeRequestFiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MergeRequestFiles) UnmarshalBinary(b []byte) error {
	var res MergeRequestFiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
