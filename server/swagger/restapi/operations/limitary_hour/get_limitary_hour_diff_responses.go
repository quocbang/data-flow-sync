// Code generated by go-swagger; DO NOT EDIT.

package limitary_hour

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/quocbang/data-flow-sync/server/swagger/models"
)

// GetLimitaryHourDiffOKCode is the HTTP code returned for type GetLimitaryHourDiffOK
const GetLimitaryHourDiffOKCode int = 200

/*GetLimitaryHourDiffOK OK

swagger:response getLimitaryHourDiffOK
*/
type GetLimitaryHourDiffOK struct {

	/*
	  In: Body
	*/
	Payload *GetLimitaryHourDiffOKBody `json:"body,omitempty"`
}

// NewGetLimitaryHourDiffOK creates GetLimitaryHourDiffOK with default headers values
func NewGetLimitaryHourDiffOK() *GetLimitaryHourDiffOK {

	return &GetLimitaryHourDiffOK{}
}

// WithPayload adds the payload to the get limitary hour diff o k response
func (o *GetLimitaryHourDiffOK) WithPayload(payload *GetLimitaryHourDiffOKBody) *GetLimitaryHourDiffOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get limitary hour diff o k response
func (o *GetLimitaryHourDiffOK) SetPayload(payload *GetLimitaryHourDiffOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLimitaryHourDiffOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLimitaryHourDiffBadRequestCode is the HTTP code returned for type GetLimitaryHourDiffBadRequest
const GetLimitaryHourDiffBadRequestCode int = 400

/*GetLimitaryHourDiffBadRequest Bad Request

swagger:response getLimitaryHourDiffBadRequest
*/
type GetLimitaryHourDiffBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetLimitaryHourDiffBadRequest creates GetLimitaryHourDiffBadRequest with default headers values
func NewGetLimitaryHourDiffBadRequest() *GetLimitaryHourDiffBadRequest {

	return &GetLimitaryHourDiffBadRequest{}
}

// WithPayload adds the payload to the get limitary hour diff bad request response
func (o *GetLimitaryHourDiffBadRequest) WithPayload(payload *models.ErrorResponse) *GetLimitaryHourDiffBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get limitary hour diff bad request response
func (o *GetLimitaryHourDiffBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLimitaryHourDiffBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLimitaryHourDiffInternalServerErrorCode is the HTTP code returned for type GetLimitaryHourDiffInternalServerError
const GetLimitaryHourDiffInternalServerErrorCode int = 500

/*GetLimitaryHourDiffInternalServerError Internal Error

swagger:response getLimitaryHourDiffInternalServerError
*/
type GetLimitaryHourDiffInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetLimitaryHourDiffInternalServerError creates GetLimitaryHourDiffInternalServerError with default headers values
func NewGetLimitaryHourDiffInternalServerError() *GetLimitaryHourDiffInternalServerError {

	return &GetLimitaryHourDiffInternalServerError{}
}

// WithPayload adds the payload to the get limitary hour diff internal server error response
func (o *GetLimitaryHourDiffInternalServerError) WithPayload(payload *models.ErrorResponse) *GetLimitaryHourDiffInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get limitary hour diff internal server error response
func (o *GetLimitaryHourDiffInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLimitaryHourDiffInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
