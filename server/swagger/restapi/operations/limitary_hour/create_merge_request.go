// Code generated by go-swagger; DO NOT EDIT.

package limitary_hour

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/quocbang/data-flow-sync/server/swagger/models"
)

// CreateMergeRequestHandlerFunc turns a function with the right signature into a create merge request handler
type CreateMergeRequestHandlerFunc func(CreateMergeRequestParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateMergeRequestHandlerFunc) Handle(params CreateMergeRequestParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateMergeRequestHandler interface for that can handle valid create merge request params
type CreateMergeRequestHandler interface {
	Handle(CreateMergeRequestParams, *models.Principal) middleware.Responder
}

// NewCreateMergeRequest creates a new http.Handler for the create merge request operation
func NewCreateMergeRequest(ctx *middleware.Context, handler CreateMergeRequestHandler) *CreateMergeRequest {
	return &CreateMergeRequest{Context: ctx, Handler: handler}
}

/* CreateMergeRequest swagger:route POST /limitary-hour/merge-request limitary-hour createMergeRequest

create merge request

*/
type CreateMergeRequest struct {
	Context *middleware.Context
	Handler CreateMergeRequestHandler
}

func (o *CreateMergeRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateMergeRequestParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateMergeRequestBody create merge request body
//
// swagger:model CreateMergeRequestBody
type CreateMergeRequestBody struct {

	// target file path
	TargetPath string `json:"TargetPath,omitempty"`

	// temporary file path
	TemporaryPath string `json:"TemporaryPath,omitempty"`
}

// Validate validates this create merge request body
func (o *CreateMergeRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create merge request body based on context it is used
func (o *CreateMergeRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateMergeRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateMergeRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateMergeRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
