// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/quocbang/data-flow-sync/server/swagger/models"
)

// SendMailOKCode is the HTTP code returned for type SendMailOK
const SendMailOKCode int = 200

/*SendMailOK OK

swagger:response sendMailOK
*/
type SendMailOK struct {
}

// NewSendMailOK creates SendMailOK with default headers values
func NewSendMailOK() *SendMailOK {

	return &SendMailOK{}
}

// WriteResponse to the client
func (o *SendMailOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SendMailBadRequestCode is the HTTP code returned for type SendMailBadRequest
const SendMailBadRequestCode int = 400

/*SendMailBadRequest Bad Request

swagger:response sendMailBadRequest
*/
type SendMailBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSendMailBadRequest creates SendMailBadRequest with default headers values
func NewSendMailBadRequest() *SendMailBadRequest {

	return &SendMailBadRequest{}
}

// WithPayload adds the payload to the send mail bad request response
func (o *SendMailBadRequest) WithPayload(payload *models.ErrorResponse) *SendMailBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send mail bad request response
func (o *SendMailBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendMailBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendMailInternalServerErrorCode is the HTTP code returned for type SendMailInternalServerError
const SendMailInternalServerErrorCode int = 500

/*SendMailInternalServerError Internal Error

swagger:response sendMailInternalServerError
*/
type SendMailInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSendMailInternalServerError creates SendMailInternalServerError with default headers values
func NewSendMailInternalServerError() *SendMailInternalServerError {

	return &SendMailInternalServerError{}
}

// WithPayload adds the payload to the send mail internal server error response
func (o *SendMailInternalServerError) WithPayload(payload *models.ErrorResponse) *SendMailInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send mail internal server error response
func (o *SendMailInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendMailInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SendMailDefault Unexpected error

swagger:response sendMailDefault
*/
type SendMailDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSendMailDefault creates SendMailDefault with default headers values
func NewSendMailDefault(code int) *SendMailDefault {
	if code <= 0 {
		code = 500
	}

	return &SendMailDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the send mail default response
func (o *SendMailDefault) WithStatusCode(code int) *SendMailDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the send mail default response
func (o *SendMailDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the send mail default response
func (o *SendMailDefault) WithPayload(payload *models.ErrorResponse) *SendMailDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send mail default response
func (o *SendMailDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendMailDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
