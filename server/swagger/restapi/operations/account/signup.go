// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SignupHandlerFunc turns a function with the right signature into a signup handler
type SignupHandlerFunc func(SignupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignupHandlerFunc) Handle(params SignupParams) middleware.Responder {
	return fn(params)
}

// SignupHandler interface for that can handle valid signup params
type SignupHandler interface {
	Handle(SignupParams) middleware.Responder
}

// NewSignup creates a new http.Handler for the signup operation
func NewSignup(ctx *middleware.Context, handler SignupHandler) *Signup {
	return &Signup{Context: ctx, Handler: handler}
}

/* Signup swagger:route POST /user/signup account signup

user sign up form

*/
type Signup struct {
	Context *middleware.Context
	Handler SignupHandler
}

func (o *Signup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSignupParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SignupBody signup body
//
// swagger:model SignupBody
type SignupBody struct {

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`
}

// Validate validates this signup body
func (o *SignupBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this signup body based on context it is used
func (o *SignupBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SignupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignupBody) UnmarshalBinary(b []byte) error {
	var res SignupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
